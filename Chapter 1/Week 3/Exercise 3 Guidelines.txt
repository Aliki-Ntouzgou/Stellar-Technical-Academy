//Install the prerequisites

sudo apt install curl
sudo apt install git

curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
source ~/.profile
nvm --version

//Install the stellarsdk package

npm install –save stellar-sdk
git clone https://github.com/stellar/js-stellar-sdk.git

//Enter to de project with the stellarsdk

cd js-stellar-sdk

//install the necessary version of nodejs

npm install
nvm install 12.0.0
npm install –g yarn

//Acces to node

node 

//Declare the StellarSdk variable

var StellarSdk = require (¨stellar-sdk¨);

// Create the keypair for the issuer account

const pair = StellarSdk.Keypair.random();
pair.secret();
pair.publicKey();

//Create the keypair for the distribution account 

const pair2 = StellarSdk.Keypair.random();
pair2.secret();
pair2.publicKey();

//exit node with Control+D
//Install node-fetch

npm install node-fetch
npm i –save node-fetch@2.6.5

//enter node again
node

// Fund with some lumens using the friendbot the issuing account, pair. 

const fetch = require (‘node-fetch’);
(async function main() {
  try {
	  const response = await fetch(
		  ‘https://friendbot.stellar.org?addr=’ + encodeURIComponent(pair.publicKey()));
			  const responseJSON = await response.json();
				console.log(¨SUCCESS! You have a new account  \n¨, responseJSON);
			} catch (e) {
				console.error(¨ERROR!¨, e);
			}
 })();
 
// do the same for the second acount, the distribution account, pair2. 

(async function main() {
  try {
    const response = await fetch(
    ‘https://friendbot.stellar.org?addr=’ + encodeURIComponent(pair2.publicKey()));
    const responseJSON = await response.json();
    console.log(¨SUCCESS! You have a new account  \n¨, responseJSON);
  } catch (e) {
    console.error(¨ERROR!¨, e);
  }
})();

//Create the object for the asset

var testDollar = new StellarSdk.Asset(¨TestDollar¨, pair.publicKey());

// Create the variable server to connect to the TESTNET

var server = new StellarSdk.Server(¨https://horizon-testnet.stellar.org¨);

//Declare the trustline between the issuer and distributor account. 

server. 
  loadAccount(pair2.publicKey()).
  then (function (receiver) {
  var transaction = new StellarSdk.TransactionBuilder(receiver, {
    fee: 100,
    networkPassphrase: StellarSdk.Network.TESTNET}).
  addOperation(
    StellarSdk.Operation.changeTrust({
      asset: testDollar,
      limit: ¨1000¨})).
    setTimeout(100).
    build();
    transaction.sign(pair2)
    return server.submitTransaction(transaction)}).
    then(console.log).

// Make the payment from the issuer account to the distributor account. 

	then(function(){
		return server.loadAccount(pair.publicKey())}).
		then(function (issuer) {
		var transaction = new StellarSdk.TransactionBuilder(issuer, {
			fee: 100,
			networkPassphrase: StellarSdk.Networks.TESTNET}).
		addOperation(
			StellarSdk.Operation.payment({
				destination: pair2.publicKey(),
				asset: testDollar,
				amount: ¨10¨})).
        		setTimeout(100).
		build();
		transaction.sign(pair);
		return server.submitTransaction(transaction)}).
		then(console.log).
		catch(function (error) {
		console.error(¨Error!, error)});
    
    








 
